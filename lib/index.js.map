{"version":3,"sources":["index.js"],"names":["Catalog","require","Chain","debug","EventEmitter","logger","passThrough","recorder","HTTP","HTTPS","DNS","origHttpRequest","request","origHttpGet","get","origHttpsGet","originalLookup","lookup","MODES","DEFAULT_MODE","MATCH_HEADERS","Replay","constructor","mode","indexOf","Error","join","chain","_localhosts","Set","_passThrough","_dropped","catalog","headers","on","error","message","use","proxy","prepend","hosts","reset","host","add","isPassThrough","domain","replace","has","drop","isDropped","localhost","isLocalhost","delete","restore","fixtures","getFixturesDir","dir","setFixturesDir","replay","process","env","REPLAY","passWhenBloodyOrCheat","url","hostname","passToLocalhost","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\n// The Replay module holds global configution properties and methods.\n\n\nconst Catalog           = require('./catalog');\nconst Chain             = require('./chain');\nconst debug             = require('./debug');\nconst { EventEmitter }  = require('events');\nconst logger            = require('./logger');\nconst passThrough       = require('./pass_through');\nconst recorder          = require('./recorder');\nconst HTTP              = require('http');\nconst HTTPS             = require('https');\nconst DNS               = require('dns');\nconst origHttpRequest   = HTTP.request;\nconst origHttpGet       = HTTP.get;\nconst origHttpsGet      = HTTPS.get;\nconst originalLookup    = DNS.lookup;\n\n// Supported modes\nconst MODES = [\n  // Allow outbound HTTP requests, don't replay anything.  Use this to test your\n  // code against changes to 3rd party API.\n  'bloody',\n\n  // Allow outbound HTTP requests, replay captured responses.  This mode is\n  // particularly useful when new code makes new requests, but unstable yet and\n  // you don't want these requests saved.\n  'cheat',\n\n  // Allow outbound HTTP requests, capture responses for future replay.  This\n  // mode allows you to capture and record new requests, e.g. when adding tests\n  // or making code changes.\n  'record',\n\n  // Do not allow outbound HTTP requests, replay captured responses.  This is\n  // the default mode and the one most useful for running tests\n  'replay'\n];\n\n// This is the standard mode for running tests\nconst DEFAULT_MODE = 'replay';\n\n// Headers that are recorded/matched during replay.\nconst MATCH_HEADERS = [ /^accept/, /^authorization/, /^body/, /^content-type/, /^host/, /^if-/, /^x-/ ];\n\n\n// Instance properties:\n//\n// catalog   - The catalog is responsible for loading pre-recorded responses\n//             into memory, from where they can be replayed, and storing captured responses.\n//\n// chain     - The proxy chain.  Essentially an array of handlers through which\n//             each request goes, and concludes when the last handler returns a\n//             response.\n//\n// headers   - Only these headers are matched when recording/replaying.  A list\n//             of regular expressions.\n//\n// fixtures  - Main directory for replay fixtures.\n//\n// mode      - The mode we're running in, see MODES.\nclass Replay extends EventEmitter {\n\n  constructor(mode) {\n    if (!(MODES.indexOf(mode) > -1)) throw new Error(`Unsupported mode '${mode}', must be one of ${MODES.join(', ')}.`);\n\n    super();\n    this.mode   = mode;\n    this.chain  = new Chain();\n\n    // Localhost servers: pass request to localhost\n    this._localhosts  = new Set([ 'localhost', '127.0.0.1', '::1' ]);\n    // Pass through requests to these servers\n    this._passThrough = new Set();\n    // Dropp connections to these servers\n    this._dropped     = new Set();\n\n    this.catalog = new Catalog(this);\n    this.headers = MATCH_HEADERS;\n\n    // Automatically emit connection errors and such, also prevent process from crashing\n    this.on('error', function(error) {\n      debug(`Replay: ${error.message || error}`);\n    });\n  }\n\n\n  // Addes a proxy to the beginning of the processing chain, so it executes ahead of any existing proxy.\n  //\n  // Example\n  //     replay.use(replay.logger())\n  use(proxy) {\n    this.chain.prepend(proxy);\n    return this;\n  }\n\n  // Pass through all requests to these hosts\n  passThrough(...hosts) {\n    this.reset(...hosts);\n    for (let host of hosts)\n      this._passThrough.add(host);\n    return this;\n  }\n\n  // True to pass through requests to this host\n  isPassThrough(host) {\n    const domain = host.replace(/^[^.]+/, '*');\n    return !!(this._passThrough.has(host) || this._passThrough.has(domain) || this._passThrough.has(`*.${host}`));\n  }\n\n  // Do not allow network access to these hosts (drop connection)\n  drop(...hosts) {\n    this.reset(...hosts);\n    for (let host of hosts)\n      this._dropped.add(host);\n    return this;\n  }\n\n  // True if this host is on the dropped list\n  isDropped(host) {\n    const domain = host.replace(/^[^.]+/, '*');\n    return !!(this._dropped.has(host) || this._dropped.has(domain) || this._dropped.has(`*.${host}`));\n  }\n\n  // Treats this host as localhost: requests are routed directly to 127.0.0.1, no\n  // replay.  Useful when you want to send requests to the test server using its\n  // production host name.\n  localhost(...hosts) {\n    this.reset(...hosts);\n    for (let host of hosts)\n      this._localhosts.add(host);\n    return this;\n  }\n\n  // True if this host should be treated as localhost.\n  isLocalhost(host) {\n    const domain = host.replace(/^[^.]+/, '*');\n    return !!(this._localhosts.has(host) || this._localhosts.has(domain) || this._localhosts.has(`*.${host}`));\n  }\n\n  // Use this when you want to exclude host from dropped/pass-through/localhost\n  reset(...hosts) {\n    for (let host of hosts) {\n      this._localhosts.delete(host);\n      this._passThrough.delete(host);\n      this._dropped.delete(host);\n    }\n    return this;\n  }\n\n  restore() {\n    HTTP.request = origHttpRequest;\n    HTTP.get = origHttpGet;\n    HTTPS.get = origHttpsGet;\n    DNS.lookup = originalLookup;\n  }\n\n  get fixtures() {\n    return this.catalog.getFixturesDir();\n  }\n\n  set fixtures(dir) {\n    // Clears loaded fixtures, and updates to new dir\n    this.catalog.setFixturesDir(dir);\n  }\n\n}\n\n\nconst replay = new Replay(process.env.REPLAY || DEFAULT_MODE);\n\n\nfunction passWhenBloodyOrCheat(request) {\n  return replay.isPassThrough(request.url.hostname) ||\n         (replay.mode === 'cheat' && !replay.isDropped(request.url.hostname));\n}\n\nfunction passToLocalhost(request) {\n  return replay.isLocalhost(request.url.hostname) ||\n         replay.mode === 'bloody';\n}\n\n// The default processing chain (from first to last):\n// - Pass through requests to localhost\n// - Log request to console is `debug` is true\n// - Replay recorded responses\n// - Pass through requests in bloody and cheat modes\nreplay\n  .use(passThrough(passWhenBloodyOrCheat))\n  .use(recorder(replay))\n  .use(logger(replay))\n  .use(passThrough(passToLocalhost));\n\n\nmodule.exports = replay;\n\n// These must come last since they need module.exports to exist\nrequire('./patch_http_request');\nrequire('./patch_dns_lookup');\n\n"]}